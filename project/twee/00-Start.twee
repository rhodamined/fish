:: StoryTitle
FISH

:: StoryInit

/* Init global variables */\


:: Start

Welcome.

You are on the East River Esplanade, a small sliver where Manhattan lets you close to the water.

You've come to the right place. You can go fishing here. 

<<include "00-Option-Cast-Line">>
You can [[enjoy the view.->00-Option-Enjoy-View]]


:: 00-Option-Cast-Line

You can <<link "cast a line.">><<script>>

function getRandomDigit() {
  let num = Math.random();
  return parseInt(String(num)[3]);
}

let digit = getRandomDigit();

console.log(digit);

if (digit < 5) {
  console.log('lessthan');
  Engine.play("01-Fish");
} 
else if (digit >= 5 && digit < 7) {

  console.log('middle');
  Engine.play("02-Eel");
} 
else if (digit >= 7 && digit < 10) {

  console.log('top');
  Engine.play("03-Oyster");
}

<</script>>
<</link>>



:: 00-Option-Enjoy-View
<<script>>
(function generate() {

  let grammarWeatherSource = {
    "origin": "The #sun# is #sunny#.",
    "sun": ["sky", "sun", "water"],
    "sunny": ["clouded over", "gentle", "sweet", "mildly upset", "reflects your mood", "too good to be true", "full of birds", "soft on your skin", "the thing that got you out of bed this morning"]
  }

  let grammarWeather = tracery.createGrammar(grammarWeatherSource);
  // grammar.addModifiers(tracery.baseEngModifiers);
  let weather = grammarWeather.flatten("#origin#");

  console.log(weather);
  State.variables.weather = weather;


  let grammarTheViewSource = {
    "origin": "You can see #view# from here.",
    "view": ["Randall's Island", "Long Island City", "way too many birds", "Dumbo", "your shadow in the water", "a plane passing by", "dog walkers on the opposite coast", "two friends arguing in the distance", "the ferries chasing fish toward you", "the Queensboro Bridge", "the Williamsburg Bridge", "the Manhattan Bridge", "the Brooklyn Bridge", "the Newtown Creek", "a park bench to put your kit down"]
  }

  let grammarTheView = tracery.createGrammar(grammarTheViewSource);
  // grammar.addModifiers(tracery.baseEngModifiers);
  let view = grammarTheView.flatten("#origin#");

  console.log(view);
  State.variables.view = view;
})();
<</script>>\
\
$weather
$view

It's a perfect day to go fishing.


<<include "00-Option-Cast-Line">>
You can [[enjoy the view.->00-Option-Enjoy-View]]


:: 00-Tracery-Test

<<script>>

(function generate() {

let grammarSource = {
  "origin": "#interjection.capitalize#, #name#! I'm #profession.a#, not #profession.a#!",
  "interjection": ["alas", "congratulations", "eureka", "fiddlesticks",
    "good grief", "hallelujah", "oops", "rats", "thanks", "whoa", "yes"],
  "name": ["Jim", "John", "Tom", "Steve", "Kevin", "Gary", "George", "Larry"],
  "profession": [
        "accountant",
        "actor",
        "archeologist",
        "astronomer",
        "audiologist",
        "bartender",
        "butcher",
        "carpenter",
        "composer",
        "crossing guard",
        "curator",
        "detective",
        "economist",
        "editor",
        "engineer",
        "epidemiologist",
        "farmer",
        "flight attendant",
        "forest fire prevention specialist",
        "graphic designer",
        "hydrologist",
        "librarian",
        "lifeguard",
        "locksmith",
        "mathematician",
        "middle school teacher",
        "nutritionist",
        "painter",
        "physical therapist",
        "priest",
        "proofreader",
        "rancher",
        "referee",
        "reporter",
        "sailor",
        "sculptor",
        "singer",
        "sociologist",
        "stonemason",
        "surgeon",
        "tailor",
        "taxi driver",
        "teacher assistant",
        "teacher",
        "teller",
        "therapist",
        "tour guide",
        "translator",
        "travel agent",
        "umpire",
        "undertaker",
        "urban planner",
        "veterinarian",
        "web developer",
        "weigher",
        "welder",
        "woodworker",
        "writer",
        "zoologist"
]
}
  // remove this loop or change the loop condition if you only want
  // to produce a single output!
let grammar = tracery.createGrammar(grammarSource);
// grammar.addModifiers(tracery.baseEngModifiers);
let output = grammar.flatten("#origin#");

console.log(output);

})();


<</script>>